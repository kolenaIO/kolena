version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4

parameters:
  classification:
    type: boolean
    default: false
  detection:
    type: boolean
    default: false
  fr:
    type: boolean
    default: false
  workflow:
    type: boolean
    default: false
  misc:
    type: boolean
    default: false
  all:
    type: boolean
    default: false
  example:
    type: boolean
    default: false

executors:
  python:
    parameters:
      python-version:
        type: string
        default: "3.9.18"
      resource-class:
        type: string
        default: "small"
    docker:
      - image: cimg/python:<< parameters.python-version >>
    resource_class: << parameters.resource-class >>
    environment:
      POETRY_CACHE_DIR: /home/circleci/project/.poetry

jobs:
  ci-base:
    parameters:
      python-version:
        type: string
        default: "3.9.18"
      extras:
        type: string
        default: "none"
    executor:
      name: python
      python-version: << parameters.python-version >>
    steps:
      - checkout
      - restore_cache:
          key: &ci-base-cache ci-cache-<< parameters.python-version >>-<< parameters.extras >>-{{ checksum "pyproject.toml" }}
      - when:
          condition:
            equal: [ "none", << parameters.extras >> ]
          steps:
            - run:
                name: Install Dependencies
                command: |
                  poetry config installer.max-workers 10
                  poetry install -vv --no-ansi
      - when:
          condition:
            equal: [ "metrics", << parameters.extras >> ]
          steps:
            - run:
                name: Install Dependencies
                command: |
                  poetry config installer.max-workers 10
                  poetry install -vv --all-extras --no-ansi
      - save_cache:
          key: *ci-base-cache
          paths:
            - /home/circleci/project/.poetry/virtualenvs
            - poetry.lock

  docs:
    parameters:
      python-version:
        type: string
        default: "3.9.18"
      extras:
        type: string
        default: "none"
    executor:
      name: python
      python-version: << parameters.python-version >>
    steps:
      - checkout
      - restore_cache:
          name: Restore Poetry cache
          key: ci-cache-<< parameters.python-version >>-<< parameters.extras >>-{{ checksum "pyproject.toml" }}
      - restore_cache:
          name: Restore MkDocs cache
          key: mkdocs-cache
      - run:
          name: Install system-level dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libcairo2-dev git-lfs
      - run:
          name: Checkout LFS blobs
          command: git lfs pull
      - run:
          name: Build documentation without 'insiders' packages
          command: poetry run mkdocs build
      - add_ssh_keys:  # add github.com SSH key fingerprint to access private repo forks
          fingerprints: ["15:8b:d4:ac:1f:cd:2f:d3:92:a7:4c:aa:46:81:0b:7d"]
      - run:
          name: Build documentation with 'insiders' packages
          command: |
            ./docs/setup_insiders.sh
            poetry run mkdocs build --config-file mkdocs.insiders.yml
      - save_cache:
          key: mkdocs-cache
          paths:
            - .cache

  unit-test:
    parameters:
      python-version:
        type: string
        default: "3.9.18"
      extras:
        type: string
        default: "none"
    executor:
      name: python
      python-version: << parameters.python-version >>
    steps:
      - checkout
      - restore_cache:
          key: ci-cache-<< parameters.python-version >>-<< parameters.extras >>-{{ checksum "pyproject.toml" }}
      - run: poetry run python3 -c 'import kolena'
      # TODO: fix underlying mypy issues with Python>3.9 rather than skipping
      - when:
          condition:
            not:
              matches:
                pattern: "^3\\.(10|11).*$"
                value: << parameters.python-version >>
          steps:
            - run: poetry run pre-commit run -a
      - when:
          condition:
            equal: [ "none", << parameters.extras >> ]
          steps:
            - run:
                name: Run unit tests
                command: |
                  poetry run pytest -m 'not metrics' -vv --cov=kolena --cov-branch tests/unit
      - when:
          condition:
            equal: [ "metrics", << parameters.extras >> ]
          steps:
            - run:
                name: Run metrics unit tests
                command: |
                  poetry run pytest -m 'metrics' -vv --cov=kolena --cov-branch tests/unit
      - when:
          # Generate coverage only from one Python version
          condition:
            matches:
                pattern: "^3\\.9.*$"
                value: << parameters.python-version >>
          steps:
            - run:
                name: Coverage
                command: |
                  poetry run coverage xml --data-file .coverage
            - codecov/upload:
                file: coverage.xml
                flags: integration

  integration-test:
    parameters:
      python-version:
        type: string
        default: "3.9"
      pytest-group:
        type: string
        default: workflow
      enabled:
        type: boolean
        default: false
      parallelism:
        type: integer
        default: 1
      extras:
        type: string
        default: "none"
    executor:
      name: python
      python-version: << parameters.python-version >>
    parallelism: << parameters.parallelism >>
    steps:
      - when:
          condition:
            not: << parameters.enabled >>
          steps:
            - run:
                name: skip job
                command: circleci-agent step halt
      - checkout
      - restore_cache:
          key: ci-cache-<< parameters.python-version >>-<< parameters.extras >>-{{ checksum "pyproject.toml" }}
      - when:
          condition:
            and:
              - equal:
                  - "none"
                  - << parameters.extras >>
              - not_equal:
                  - _experimental
                  - << parameters.pytest-group >>
          steps:
            - run:
                name: Run << parameters.pytest-group >> integration tests
                command: |
                  export KOLENA_TOKEN=${KOLENA_TOKEN}
                  TEST_GROUP="<< parameters.pytest-group >>"
                  if [ "$TEST_GROUP" = "misc" ]; then
                    TESTFILES=$(circleci tests glob tests/integration/test_*.py |
                      circleci tests split --split-by=timings --timings-type=filename)
                  else
                    TESTFILES=$(find tests/integration/$TEST_GROUP -name "test_*.py" |
                      circleci tests split --split-by=timings --timings-type=filename)
                  fi
                  if [ ! -z "$TESTFILES" ]; then
                    poetry run pytest -vv --durations=10 --cov=kolena --cov-branch -o junit_family=legacy \
                      --junitxml=test-results/result.xml $TESTFILES
                  fi
      - when:
          condition:
            equal: [ "metrics", << parameters.extras >> ]
          steps:
            - run:
                name: Run experimental metrics integration tests
                command: |
                  export KOLENA_TOKEN=${KOLENA_TOKEN}
                  poetry run pytest -m 'metrics' -vv --cov=kolena --cov-branch tests/integration/
      - when:
          # Generate coverage only from one python version
          condition:
            matches:
              pattern: "^3\\.9.*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Coverage
                command: |
                  poetry run coverage xml --data-file .coverage
            - codecov/upload:
                file: coverage.xml
            - store_test_results:
                path: test-results

  example-test:
    parameters:
      python-version:
        type: string
        default: "3.9.18"
      subproject:
        type: string
      resource-class:
        type: string
    executor:
      name: python
      python-version: << parameters.python-version >>
      resource-class: << parameters.resource-class >>
    working_directory: ~/project/examples/<< parameters.subproject >>
    steps:
      - checkout:
          path: ~/project
      - run: |
          poetry config installer.max-workers 10
          poetry install -vv --no-ansi
      - run:
          name: Run pre-commit checks
          command: |
            poetry run pre-commit run -a
      - run:
          name: Run << parameters.subproject >> (Python << parameters.python-version >>) integration tests
          command: |
            export KOLENA_TOKEN=${KOLENA_TOKEN}
            poetry run pytest -vv tests
  example-evaluator:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build evaluator
          command: |
            examples/text_summarization/docker/build.sh

workflows:
  ci:
    jobs:
      - ci-base:
          name: ci-base-<< matrix.python-version >>-<< matrix.extras >>
          matrix:
            parameters:
              python-version: [ "3.7.17", "3.8.18", "3.9.18", "3.10.13", "3.11.6" ]
              extras: ["none", "metrics"]
      - unit-test:
          name: unit-test-<< matrix.python-version >>-<< matrix.extras >>
          matrix:
            parameters:
              python-version: [ "3.7.17", "3.8.18", "3.9.18", "3.10.13", "3.11.6" ]
              extras: ["none", "metrics"]
          requires:
            - ci-base-<< matrix.python-version >>-<< matrix.extras >>
      - docs:
          name: docs-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: [ "3.9.18" ]
              extras: ["none"]
          requires:
            - ci-base-<< matrix.python-version >>-<< matrix.extras >>
      - integration-test:
          name: integration-test-<< matrix.pytest-group >>-<< matrix.python-version >>-<< matrix.extras >>
          matrix:
            parameters:
              python-version: [ "3.9.18" ]
              pytest-group: [ detection, fr, classification, workflow ]
              extras: ["none"]
          enabled: true
          parallelism: 4
          requires:
            - ci-base-<< matrix.python-version >>-<< matrix.extras >>
      - integration-test:
          name: integration-test-experimental-<< matrix.python-version >>-<< matrix.extras >>
          matrix:
            parameters:
              python-version: [ "3.9.18" ]
              extras: ["metrics"]
          pytest-group: _experimental
          enabled: true
          parallelism: 1
          requires:
            - ci-base-<< matrix.python-version >>-<< matrix.extras >>
      - integration-test:
          name: integration-test-misc-<< matrix.python-version >>-<< matrix.extras >>
          matrix:
            parameters:
              python-version: [ "3.9.18" ]
              extras: ["none"]
          pytest-group: misc
          enabled: << pipeline.parameters.all >>
          parallelism: 1
          requires:
            - ci-base-<< matrix.python-version >>-<< matrix.extras >>
  example:
    when:
      or: [ << pipeline.parameters.workflow >>, << pipeline.parameters.all >>, << pipeline.parameters.example >> ]
    jobs:
      - example-test:
          matrix:
            parameters:
              subproject: [ text_summarization ]
              resource-class: [ large ]
              python-version: [ "3.9.18" ]
      - example-test:
          matrix:
            parameters:
              subproject: [ keypoint_detection, age_estimation, object_detection_3d, classification, question_answering ]
              resource-class: [ small ]
              python-version: [ "3.9.18" ]
  example-evaluator:
    when:
      condition:
        equal: [ "trunk", << pipeline.git.branch >> ]
    jobs:
      - example-evaluator
